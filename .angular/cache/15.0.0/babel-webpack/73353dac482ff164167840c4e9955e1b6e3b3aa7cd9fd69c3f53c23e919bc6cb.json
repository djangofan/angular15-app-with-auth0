{"ast":null,"code":"import _asyncToGenerator from \"/home/austenjt/IdeaProjects/angular15-app-with-auth0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from 'axios';\nimport { catchError, mergeMap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ExternalApiService = /*#__PURE__*/(() => {\n  class ExternalApiService {\n    constructor(http) {\n      this.http = http;\n      this.callExternalApiWithAxios = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (options) {\n          try {\n            const response = yield axios(options.config);\n            const {\n              data\n            } = response;\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n              const axiosError = error;\n              const {\n                response\n              } = axiosError;\n              let message = 'http request failed';\n              if (response && response.statusText) {\n                message = response.statusText;\n              }\n              if (axiosError.message) {\n                message = axiosError.message;\n              }\n              if (response && response.data && response.data.message) {\n                message = response.data.message;\n              }\n              return {\n                data: null,\n                error: {\n                  message\n                }\n              };\n            }\n            return {\n              data: null,\n              error: {\n                message: error.message\n              }\n            };\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this.callExternalApi = config => {\n        return this.http.request(config.method, config.url, config.headers).pipe(mergeMap(data => {\n          return of({\n            data: data,\n            error: null\n          });\n        }), catchError(err => {\n          if (err.error && err.status) {\n            return of({\n              data: null,\n              error: err.error\n            });\n          }\n          return of({\n            data: null,\n            error: {\n              message: err.message\n            }\n          });\n        }));\n      };\n    }\n  }\n  ExternalApiService.ɵfac = function ExternalApiService_Factory(t) {\n    return new (t || ExternalApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ExternalApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExternalApiService,\n    factory: ExternalApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExternalApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}